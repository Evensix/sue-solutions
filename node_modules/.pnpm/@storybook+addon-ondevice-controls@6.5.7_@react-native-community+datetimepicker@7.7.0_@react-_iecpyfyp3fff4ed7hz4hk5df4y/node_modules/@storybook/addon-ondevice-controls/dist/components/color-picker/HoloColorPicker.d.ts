export class HoloColorPicker extends React.PureComponent<any, any, any> {
    constructor(props: any, ctx: any);
    state: {
        color: {
            h: number;
            s: number;
            v: number;
        };
        pickerSize: any;
    };
    _layout: {
        width: number;
        height: number;
        x: number;
        y: number;
    };
    _pageX: number;
    _pageY: number;
    _onLayout(l: any): void;
    _onSValueChange(s: any): void;
    _onVValueChange(v: any): void;
    _onColorSelected(): void;
    _onOldColorSelected(): void;
    _isRTL: boolean;
    _pickerResponder: import("react-native").PanResponderInstance;
    pickerContainer: React.RefObject<any>;
    getColor(): any;
    _handleColorChange: ({ x, y }: {
        x: any;
        y: any;
    }) => void;
    _onColorChange(color: any): void;
    _getColor(): any;
    _computeHValue(x: any, y: any): number;
    _hValueToRad(deg: any): number;
    render(): import("react/jsx-runtime").JSX.Element;
}
export namespace HoloColorPicker {
    namespace propTypes {
        let color: PropTypes.Requireable<NonNullable<string | PropTypes.InferProps<{
            h: PropTypes.Requireable<number>;
            s: PropTypes.Requireable<number>;
            v: PropTypes.Requireable<number>;
        }>>>;
        let defaultColor: PropTypes.Requireable<string>;
        let oldColor: PropTypes.Requireable<string>;
        let onColorChange: PropTypes.Requireable<(...args: any[]) => any>;
        let onColorSelected: PropTypes.Requireable<(...args: any[]) => any>;
        let onOldColorSelected: PropTypes.Requireable<(...args: any[]) => any>;
        let hideSliders: PropTypes.Requireable<boolean>;
        let style: PropTypes.Requireable<any>;
    }
}
import React from 'react';
import PropTypes from 'prop-types';
