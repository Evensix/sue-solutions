"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const slider_1 = __importDefault(require("@react-native-community/slider"));
const react_native_theming_1 = require("@storybook/react-native-theming");
const react_1 = require("react");
const react_native_1 = require("react-native");
const common_1 = require("./common");
const useResyncValue_1 = require("./useResyncValue");
const Input = react_native_theming_1.styled.TextInput(({ theme, showError }) => {
    const style = (0, common_1.inputStyle)(theme);
    return {
        ...style,
        borderColor: showError ? theme.inputs.errorTextColor : style.borderColor,
    };
});
const ValueContainer = react_native_theming_1.styled.View({ flexDirection: 'row' });
const LabelText = react_native_theming_1.styled.Text(({ theme }) => ({
    color: theme.inputs.slider.labelTextColor,
    fontSize: theme.inputs.slider.fontSize,
}));
const ValueText = react_native_theming_1.styled.Text(({ theme }) => ({
    color: theme.inputs.slider.valueTextColor,
    fontSize: theme.inputs.slider.fontSize,
}));
const NumberType = ({ arg, isPristine, onChange = (value) => value }) => {
    const showError = Number.isNaN(arg.value);
    const [numStr, setNumStr] = (0, react_1.useState)(arg.value?.toString());
    const updateNumstr = (0, react_1.useCallback)((value) => setNumStr(value?.toString()), []);
    const { key, setCurrentValue } = (0, useResyncValue_1.useResyncValue)(arg.value, isPristine, updateNumstr);
    const handleNormalChangeText = (text) => {
        const commaReplaced = text.trim().replace(/,/, '.');
        setNumStr(commaReplaced);
        if (commaReplaced === '-') {
            onChange(-1);
            setCurrentValue(-1);
        }
        else {
            onChange(Number(commaReplaced));
            setCurrentValue(Number(commaReplaced));
        }
    };
    if (arg.range) {
        return ((0, jsx_runtime_1.jsxs)(react_native_1.View, { children: [(0, jsx_runtime_1.jsxs)(ValueContainer, { children: [(0, jsx_runtime_1.jsx)(LabelText, { children: "Value: " }), (0, jsx_runtime_1.jsx)(ValueText, { children: arg.value })] }), (0, jsx_runtime_1.jsx)(slider_1.default, { minimumValue: arg.min, maximumValue: arg.max, step: arg.step, value: arg.value, onSlidingComplete: (val) => {
                        onChange(val);
                        setCurrentValue(val);
                    } })] }, key));
    }
    else {
        return ((0, jsx_runtime_1.jsx)(Input, { autoCapitalize: "none", underlineColorAndroid: "transparent", value: numStr, keyboardType: "numeric", onChangeText: handleNormalChangeText, showError: showError }));
    }
};
NumberType.serialize = (value) => String(value);
NumberType.deserialize = (value) => parseFloat(value);
exports.default = NumberType;
