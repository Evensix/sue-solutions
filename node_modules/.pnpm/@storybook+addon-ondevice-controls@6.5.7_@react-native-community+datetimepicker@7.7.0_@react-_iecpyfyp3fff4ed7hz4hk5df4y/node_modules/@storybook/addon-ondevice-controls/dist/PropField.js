"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const react_native_theming_1 = require("@storybook/react-native-theming");
const types_1 = __importDefault(require("./types"));
const InvalidTypeText = react_native_theming_1.styled.Text(({ theme }) => ({
    color: theme.inputs.errorTextColor,
}));
const InvalidType = ({ arg }) => ((0, jsx_runtime_1.jsxs)(InvalidTypeText, { children: ["Invalid type: ", arg.type] }));
const Label = react_native_theming_1.styled.Text(({ theme }) => ({
    paddingBottom: theme.tokens.spacing1,
    fontSize: theme.inputs.labelFontSize,
    color: theme.inputs.labelTextColor,
    fontWeight: '500',
}));
const Container = react_native_theming_1.styled.View(({ theme }) => ({
    paddingBottom: theme.tokens.spacing4,
}));
const InputContainer = react_native_theming_1.styled.View();
const PropField = ({ onChange, arg, isPristine }) => {
    const InputType = types_1.default[arg.type];
    return ((0, jsx_runtime_1.jsxs)(Container, { children: [!arg.hideLabel ? (0, jsx_runtime_1.jsx)(Label, { children: `${arg.label || arg.name}` }) : null, (0, jsx_runtime_1.jsx)(InputContainer, { children: InputType ? ((0, jsx_runtime_1.jsx)(InputType, { arg: arg, isPristine: isPristine, onChange: onChange })) : ((0, jsx_runtime_1.jsx)(InvalidType, { arg: arg })) })] }));
};
exports.default = PropField;
