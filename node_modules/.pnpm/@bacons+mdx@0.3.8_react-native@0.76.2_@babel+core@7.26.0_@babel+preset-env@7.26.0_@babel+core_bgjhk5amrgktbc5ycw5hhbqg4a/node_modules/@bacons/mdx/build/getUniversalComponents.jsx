"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getUniversalComponents = void 0;
const react_views_1 = require("@bacons/react-views");
const htmlElements = __importStar(require("@expo/html-elements"));
const react_1 = __importDefault(require("react"));
const react_native_1 = require("react-native");
const AutoImage_1 = require("./AutoImage");
const headings = __importStar(require("./headings"));
const List = __importStar(require("./list/List"));
const getDOMComponents_1 = require("./getDOMComponents");
/**
 * Get base elements that are generally optimized for cross-platform usage.
 * These are less standard on the web as they use `react-native-web` wrappers,
 * but they will run on platforms that support React Native.
 */
function getUniversalComponents() {
    return {
        // Defaults to ensure web always works since this is a web-first feature.
        // Native can be extended as needed.
        ...(0, getDOMComponents_1.getDOMComponents)(),
        ...react_native_1.Platform.select({
            native: {
                ul: List.UL,
                // TODO
                li: List.LI,
                // TODO
                ol: List.UL,
            },
        }),
        h1: wrapHeader(headings.H1),
        h2: wrapHeader(headings.H2),
        h3: wrapHeader(headings.H3),
        h4: wrapHeader(headings.H4),
        h5: (0, getDOMComponents_1.stripExtras)(headings.H5),
        h6: (0, getDOMComponents_1.stripExtras)(headings.H6),
        a: (0, getDOMComponents_1.stripExtras)(htmlElements.A),
        nav: (0, getDOMComponents_1.stripExtras)(htmlElements.Nav),
        footer: (0, getDOMComponents_1.stripExtras)(htmlElements.Footer),
        aside: (0, getDOMComponents_1.stripExtras)(htmlElements.Aside),
        header: (0, getDOMComponents_1.stripExtras)(htmlElements.Header),
        main: (0, getDOMComponents_1.stripExtras)(htmlElements.Main),
        article: (0, getDOMComponents_1.stripExtras)(htmlElements.Article),
        section: (0, getDOMComponents_1.stripExtras)(htmlElements.Section),
        p: Paragraph,
        b: (0, getDOMComponents_1.stripExtras)(htmlElements.B),
        s: (0, getDOMComponents_1.stripExtras)(htmlElements.S),
        i: (0, getDOMComponents_1.stripExtras)(htmlElements.I),
        q: (0, getDOMComponents_1.stripExtras)(htmlElements.Q),
        blockquote: (0, getDOMComponents_1.stripExtras)(htmlElements.BlockQuote),
        br: (0, getDOMComponents_1.stripExtras)(htmlElements.BR),
        mark: (0, getDOMComponents_1.stripExtras)(htmlElements.Mark),
        code: (0, getDOMComponents_1.stripExtras)(htmlElements.Code),
        // TODO
        inlineCode: (0, getDOMComponents_1.stripExtras)(htmlElements.Code),
        pre: (0, getDOMComponents_1.stripExtras)(htmlElements.Pre),
        time: (0, getDOMComponents_1.stripExtras)(htmlElements.Time),
        strong: (0, getDOMComponents_1.stripExtras)(htmlElements.Strong),
        del: (0, getDOMComponents_1.stripExtras)(htmlElements.Del),
        em: (0, getDOMComponents_1.stripExtras)(htmlElements.EM),
        hr: (0, getDOMComponents_1.stripExtras)(htmlElements.HR),
        div: Div,
        span: react_views_1.Text,
        img: Img,
    };
}
exports.getUniversalComponents = getUniversalComponents;
function Paragraph({ style, children }) {
    // NOTE(EvanBacon): Unclear why, but mdxjs is wrapping an image in a paragraph tag.
    // This can lead to nesting a div in a p on web, which is invalid.
    const image = react_1.default.Children.toArray(children).find((child) => {
        return typeof child === "object" && "props" in child && child.props.src;
    });
    if (image) {
        return <>{children}</>;
    }
    return <react_views_1.Text style={style} children={children}/>;
}
function Div(props) {
    return <react_views_1.View {...props} style={[{ flex: 1 }, props.style]}/>;
}
function Img({ src, style }) {
    const source = typeof src === "string" ? { uri: src } : src;
    if (react_native_1.Platform.OS === "web" || !source.uri) {
        return <react_views_1.Image source={source} style={style}/>;
    }
    return <AutoImage_1.AutoImage style={style} source={source}/>;
}
function wrapHeader(Element) {
    return function Header({ firstChild, lastChild, firstOfType, index, prevSibling, ...props }) {
        const isFirst = index === 0;
        return (<Element {...props} style={[props.style, isFirst ? { marginTop: 0 } : {}]}/>);
    };
}
//# sourceMappingURL=getUniversalComponents.jsx.map