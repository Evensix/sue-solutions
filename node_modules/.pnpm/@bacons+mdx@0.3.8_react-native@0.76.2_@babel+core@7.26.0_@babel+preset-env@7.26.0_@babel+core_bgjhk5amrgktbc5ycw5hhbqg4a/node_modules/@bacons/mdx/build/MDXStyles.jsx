"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MDXStyles = exports.useMDXStyles = exports.MDXStylesContext = void 0;
const React = __importStar(require("react"));
exports.MDXStylesContext = React.createContext({});
function useMDXStyles() {
    return React.useContext(exports.MDXStylesContext);
}
exports.useMDXStyles = useMDXStyles;
function MDXStyles({ children, ...props }) {
    const parent = useMDXStyles();
    const value = React.useMemo(() => ({
        ...Object.keys({ ...props, ...parent }).reduce((acc, key) => {
            const parentValue = parent[key];
            const childValue = props[key];
            if (typeof parentValue === "object" && typeof childValue === "object") {
                acc[key] = {
                    ...parentValue,
                    ...childValue,
                };
            }
            else {
                if (key in props) {
                    acc[key] = childValue;
                }
                else if (key in parent) {
                    acc[key] = parentValue;
                }
            }
            return acc;
        }, {}),
    }), [parent, props]);
    return (<exports.MDXStylesContext.Provider value={value}>
      {children}
    </exports.MDXStylesContext.Provider>);
}
exports.MDXStyles = MDXStyles;
//# sourceMappingURL=MDXStyles.jsx.map