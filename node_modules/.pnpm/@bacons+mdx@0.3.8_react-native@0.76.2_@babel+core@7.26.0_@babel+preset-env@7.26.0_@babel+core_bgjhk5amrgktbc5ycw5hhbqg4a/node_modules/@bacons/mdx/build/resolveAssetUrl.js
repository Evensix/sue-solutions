"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.resolveAssetUrl = void 0;
const registry_1 = __importDefault(require("@react-native/assets-registry/registry"));
const react_native_1 = require("react-native");
const svgDataUriPattern = /^(data:image\/svg\+xml;utf8,)(.*)/;
/**
 * Given a Metro asset, return the server URL, e.g. `resolveAssetUrl(require('./image.png'))` -> `/assets/image.png`
 *
 * @param source The asset ID, or a string or object with a `uri` property.
 */
function resolveAssetUrl(source) {
    let url = null;
    if (typeof source === "number") {
        url = resolveAssetUrlFromNumericMetroId(source);
    }
    else if (typeof source === "string") {
        url = source;
    }
    else if (source && typeof source.uri === "string") {
        url = source.uri;
    }
    if (!url) {
        return url;
    }
    const match = url.match(svgDataUriPattern);
    // inline SVG markup may contain characters (e.g., #, ") that need to be escaped
    if (match) {
        const [, prefix, svg] = match;
        const encodedSvg = encodeURIComponent(svg);
        return `${prefix}${encodedSvg}`;
    }
    return url;
}
exports.resolveAssetUrl = resolveAssetUrl;
function resolveAssetUrlFromNumericMetroId(source) {
    // get the URI from the packager
    const asset = registry_1.default.getAssetByID(source);
    if (asset == null) {
        throw new Error(`Image: asset with ID "${source}" could not be found. Please check the image source or packager.`);
    }
    let scale = asset.scales[0];
    if (asset.scales.length > 1) {
        const preferredScale = react_native_1.PixelRatio.get();
        // Get the scale which is closest to the preferred scale
        scale = asset.scales.reduce((prev, curr) => Math.abs(curr - preferredScale) < Math.abs(prev - preferredScale)
            ? curr
            : prev);
    }
    const scaleSuffix = scale !== 1 ? `@${scale}x` : "";
    return asset
        ? `${asset.httpServerLocation}/${asset.name}${scaleSuffix}.${asset.type}`
        : "";
}
//# sourceMappingURL=resolveAssetUrl.js.map