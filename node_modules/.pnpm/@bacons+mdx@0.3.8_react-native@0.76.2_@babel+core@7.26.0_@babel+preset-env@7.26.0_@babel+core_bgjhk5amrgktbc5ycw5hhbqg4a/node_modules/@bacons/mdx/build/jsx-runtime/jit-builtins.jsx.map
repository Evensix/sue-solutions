{"version":3,"file":"jit-builtins.jsx","sourceRoot":"","sources":["../../src/jsx-runtime/jit-builtins.tsx"],"names":[],"mappings":";;AAAA,6BAA2B;AAC3B,qDAAqD;AACrD;;GAEG;AACH,MAAM,qBAAqB,GAAG,IAAI,GAAG,EAAe,CAAC;AAWrD;;;;GAIG;AACH,SAAwB,eAAe,CAAC,GAAgB;IACtD,OAAO,UAAU,IAAI,EAAE,KAAK,EAAE,GAAG,IAAI;QACnC,IAAI,OAAO,IAAI,KAAK,QAAQ,IAAI,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;YACnD,MAAM,CAAC,EAAE,AAAD,EAAG,QAAQ,CAAC,GAAG,IAAI,CAAC;YAC5B,iFAAiF;YACjF,KAAK,CAAC,QAAQ,GAAG,QAAQ,CAAC;YAE1B,IAAI,qBAAqB,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;gBACnC,IAAI,GAAG,qBAAqB,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;aACxC;iBAAM;gBACL,4HAA4H;gBAC5H,MAAM,OAAO,GAAG,IAAA,kCAAiB,EAAC,IAAI,CAAC,CAAC;gBAExC,qBAAqB,CAAC,GAAG,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;gBACzC,IAAI,GAAG,OAAO,CAAC;aAChB;SACF;QAED,mDAAmD;QACnD,OAAO,GAAG,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,IAAI,CAAC,CAAC;IAC7C,CAAC,CAAC;AACJ,CAAC;AArBD,kCAqBC","sourcesContent":["import \"react/jsx-runtime\";\nimport { createMissingView } from \"./MissingDomView\";\n/**\n * A map that caches registered native components.\n */\nconst nativeComponentsCache = new Map<string, any>();\n\nexport type JSXFunction = (\n  type: React.ComponentType,\n  props: Record<string, any> | undefined | null,\n  key?: React.Key,\n  isStaticChildren?: boolean,\n  __source?: unknown,\n  __self?: unknown\n) => React.ElementType;\n\n/**\n * A JSX creator which replaces lowercase string components with the MissingDomView component.\n * This is intended for development native builds where a user might accidentally pull in a built-in component from the web which doesn't exist on native.\n * The replacement is designed to make it easy to spot the issue and provide a helpful error message.\n */\nexport default function withJitBuiltIns(jsx: JSXFunction): JSXFunction {\n  return function (type, props, ...rest) {\n    if (typeof type === \"string\" && /^[a-z]/.test(type)) {\n      const [, , __source] = rest;\n      // @ts-expect-error: Add the source to the props for improving the error message.\n      props.$$source = __source;\n\n      if (nativeComponentsCache.has(type)) {\n        type = nativeComponentsCache.get(type);\n      } else {\n        // TODO: Add some system to detect if a component exists on the native side, if it doesn't then use a helpful error message.\n        const domView = createMissingView(type);\n\n        nativeComponentsCache.set(type, domView);\n        type = domView;\n      }\n    }\n\n    // Call the original jsx function with the new type\n    return jsx.call(jsx, type, props, ...rest);\n  };\n}\n"]}