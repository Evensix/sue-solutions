{"version":3,"file":"resolveAssetUrl.js","sourceRoot":"","sources":["../src/resolveAssetUrl.ts"],"names":[],"mappings":";;;;;;AAAA,sFAA8D;AAC9D,+CAA0C;AAE1C,MAAM,iBAAiB,GAAG,mCAAmC,CAAC;AAE9D;;;;GAIG;AACH,SAAgB,eAAe,CAAC,MAAW;IACzC,IAAI,GAAG,GAAkB,IAAI,CAAC;IAC9B,IAAI,OAAO,MAAM,KAAK,QAAQ,EAAE;QAC9B,GAAG,GAAG,iCAAiC,CAAC,MAAM,CAAC,CAAC;KACjD;SAAM,IAAI,OAAO,MAAM,KAAK,QAAQ,EAAE;QACrC,GAAG,GAAG,MAAM,CAAC;KACd;SAAM,IAAI,MAAM,IAAI,OAAO,MAAM,CAAC,GAAG,KAAK,QAAQ,EAAE;QACnD,GAAG,GAAG,MAAM,CAAC,GAAG,CAAC;KAClB;IAED,IAAI,CAAC,GAAG,EAAE;QACR,OAAO,GAAG,CAAC;KACZ;IAED,MAAM,KAAK,GAAG,GAAG,CAAC,KAAK,CAAC,iBAAiB,CAAC,CAAC;IAC3C,gFAAgF;IAChF,IAAI,KAAK,EAAE;QACT,MAAM,CAAC,EAAE,MAAM,EAAE,GAAG,CAAC,GAAG,KAAK,CAAC;QAC9B,MAAM,UAAU,GAAG,kBAAkB,CAAC,GAAG,CAAC,CAAC;QAC3C,OAAO,GAAG,MAAM,GAAG,UAAU,EAAE,CAAC;KACjC;IAED,OAAO,GAAG,CAAC;AACb,CAAC;AAvBD,0CAuBC;AAED,SAAS,iCAAiC,CAAC,MAAc;IACvD,gCAAgC;IAChC,MAAM,KAAK,GAAG,kBAAQ,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;IAC5C,IAAI,KAAK,IAAI,IAAI,EAAE;QACjB,MAAM,IAAI,KAAK,CACb,yBAAyB,MAAM,kEAAkE,CAClG,CAAC;KACH;IACD,IAAI,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;IAC5B,IAAI,KAAK,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;QAC3B,MAAM,cAAc,GAAG,yBAAU,CAAC,GAAG,EAAE,CAAC;QACxC,wDAAwD;QACxD,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,IAAI,EAAE,EAAE,CACzC,IAAI,CAAC,GAAG,CAAC,IAAI,GAAG,cAAc,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,GAAG,cAAc,CAAC;YAC/D,CAAC,CAAC,IAAI;YACN,CAAC,CAAC,IAAI,CACT,CAAC;KACH;IACD,MAAM,WAAW,GAAG,KAAK,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,KAAK,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC;IACpD,OAAO,KAAK;QACV,CAAC,CAAC,GAAG,KAAK,CAAC,kBAAkB,IAAI,KAAK,CAAC,IAAI,GAAG,WAAW,IAAI,KAAK,CAAC,IAAI,EAAE;QACzE,CAAC,CAAC,EAAE,CAAC;AACT,CAAC","sourcesContent":["import registry from \"@react-native/assets-registry/registry\";\nimport { PixelRatio } from \"react-native\";\n\nconst svgDataUriPattern = /^(data:image\\/svg\\+xml;utf8,)(.*)/;\n\n/**\n * Given a Metro asset, return the server URL, e.g. `resolveAssetUrl(require('./image.png'))` -> `/assets/image.png`\n *\n * @param source The asset ID, or a string or object with a `uri` property.\n */\nexport function resolveAssetUrl(source: any): string | null {\n  let url: string | null = null;\n  if (typeof source === \"number\") {\n    url = resolveAssetUrlFromNumericMetroId(source);\n  } else if (typeof source === \"string\") {\n    url = source;\n  } else if (source && typeof source.uri === \"string\") {\n    url = source.uri;\n  }\n\n  if (!url) {\n    return url;\n  }\n\n  const match = url.match(svgDataUriPattern);\n  // inline SVG markup may contain characters (e.g., #, \") that need to be escaped\n  if (match) {\n    const [, prefix, svg] = match;\n    const encodedSvg = encodeURIComponent(svg);\n    return `${prefix}${encodedSvg}`;\n  }\n\n  return url;\n}\n\nfunction resolveAssetUrlFromNumericMetroId(source: number): string {\n  // get the URI from the packager\n  const asset = registry.getAssetByID(source);\n  if (asset == null) {\n    throw new Error(\n      `Image: asset with ID \"${source}\" could not be found. Please check the image source or packager.`\n    );\n  }\n  let scale = asset.scales[0];\n  if (asset.scales.length > 1) {\n    const preferredScale = PixelRatio.get();\n    // Get the scale which is closest to the preferred scale\n    scale = asset.scales.reduce((prev, curr) =>\n      Math.abs(curr - preferredScale) < Math.abs(prev - preferredScale)\n        ? curr\n        : prev\n    );\n  }\n  const scaleSuffix = scale !== 1 ? `@${scale}x` : \"\";\n  return asset\n    ? `${asset.httpServerLocation}/${asset.name}${scaleSuffix}.${asset.type}`\n    : \"\";\n}\n"]}