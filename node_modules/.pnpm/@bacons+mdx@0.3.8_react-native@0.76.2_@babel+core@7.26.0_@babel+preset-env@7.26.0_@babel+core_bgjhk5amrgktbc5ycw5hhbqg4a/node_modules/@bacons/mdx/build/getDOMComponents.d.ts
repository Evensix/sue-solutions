import React from "react";
export declare const OrderContext: React.Context<{
    index: number;
    firstChild: boolean;
    lastChild: boolean;
    firstOfType: boolean;
    prevSibling: string;
} | null>;
declare const HTML_KEYS: readonly ["h1", "h2", "h3", "h4", "h5", "h6", "a", "nav", "footer", "aside", "header", "main", "article", "section", "p", "b", "s", "i", "q", "blockquote", "br", "mark", "code", "pre", "time", "strong", "del", "em", "hr", "div", "span", "img", "table", "thead", "tbody", "tfoot", "th", "tr", "td", "caption", "sup", "ul", "li", "ol", "input"];
export type ComponentKeys = "Wrapper" | "inlineCode" | (typeof HTML_KEYS)[number];
/**
 * Get base elements that work natively to the browser. If the native app has any of these views built-in, then they can be used there too.
 */
export declare function getDOMComponents(): Record<ComponentKeys, React.ComponentType<any>>;
export declare function RootWrapper({ children }: {
    children: any;
}): any;
export declare function useOrder(): {
    index: number;
    firstChild: boolean;
    lastChild: boolean;
    firstOfType: boolean;
    prevSibling: string;
} | null;
export declare function stripExtras(Element: any, displayName?: string): {
    ({ firstChild, lastChild, firstOfType, index, prevSibling, parentName, ...props }: {
        [x: string]: any;
        firstChild: any;
        lastChild: any;
        firstOfType: any;
        index: any;
        prevSibling: any;
        parentName: any;
    }): React.JSX.Element;
    displayName: any;
};
export {};
//# sourceMappingURL=getDOMComponents.d.ts.map