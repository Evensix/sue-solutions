"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.stripExtras = exports.useOrder = exports.RootWrapper = exports.getDOMComponents = exports.OrderContext = void 0;
const registry_1 = __importDefault(require("@react-native/assets-registry/registry"));
const react_1 = __importStar(require("react"));
const react_native_1 = require("react-native");
exports.OrderContext = react_1.default.createContext(null);
function MDImage({ src, ...props }) {
    const resolvedSrc = react_1.default.useMemo(() => resolveAssetUri(src), [src]);
    return <img {...props} src={resolvedSrc !== null && resolvedSrc !== void 0 ? resolvedSrc : undefined}/>;
}
const svgDataUriPattern = /^(data:image\/svg\+xml;utf8,)(.*)/;
function resolveAssetUri(source) {
    let uri = null;
    if (typeof source === "number") {
        // get the URI from the packager
        let asset = registry_1.default.getAssetByID(source);
        if (asset == null) {
            throw new Error('Image: asset with ID "' +
                source +
                '" could not be found. Please check the image source or packager.');
        }
        let scale = asset.scales[0];
        if (asset.scales.length > 1) {
            const preferredScale = react_native_1.PixelRatio.get();
            // Get the scale which is closest to the preferred scale
            scale = asset.scales.reduce((prev, curr) => Math.abs(curr - preferredScale) < Math.abs(prev - preferredScale)
                ? curr
                : prev);
        }
        const scaleSuffix = scale !== 1 ? "@" + scale + "x" : "";
        uri = asset
            ? asset.httpServerLocation +
                "/" +
                asset.name +
                scaleSuffix +
                "." +
                asset.type
            : "";
    }
    else if (typeof source === "string") {
        uri = source;
    }
    else if (source && typeof source.uri === "string") {
        uri = source.uri;
    }
    if (uri) {
        const match = uri.match(svgDataUriPattern);
        // inline SVG markup may contain characters (e.g., #, ") that need to be escaped
        if (match) {
            const prefix = match[1];
            const svg = match[2];
            const encodedSvg = encodeURIComponent(svg);
            return "" + prefix + encodedSvg;
        }
    }
    return uri;
}
const HTML_KEYS = [
    "h1",
    "h2",
    "h3",
    "h4",
    "h5",
    "h6",
    "a",
    "nav",
    "footer",
    "aside",
    "header",
    "main",
    "article",
    "section",
    "p",
    "b",
    "s",
    "i",
    "q",
    "blockquote",
    "br",
    "mark",
    "code",
    "pre",
    "time",
    "strong",
    "del",
    "em",
    "hr",
    "div",
    "span",
    "img",
    "table",
    "thead",
    "tbody",
    "tfoot",
    "th",
    "tr",
    "td",
    "caption",
    // Task lists
    "sup",
    "ul",
    "li",
    "ol",
    "input",
];
/**
 * Get base elements that work natively to the browser. If the native app has any of these views built-in, then they can be used there too.
 */
function getDOMComponents() {
    const passthroughElements = HTML_KEYS.map((elementName) => [
        elementName,
        stripExtras(elementName),
    ]);
    return {
        // Defaults to ensure web always works since this is a web-first feature.
        // Native can be extended as needed.
        ...Object.fromEntries(passthroughElements),
        Wrapper: RootWrapper,
        inlineCode: stripExtras("code"),
        img: stripExtras(MDImage, "img"),
    };
}
exports.getDOMComponents = getDOMComponents;
function RootWrapper({ children }) {
    const prevChildTypes = ["root"];
    const childrenCount = react_1.Children.count(children);
    return react_1.Children.map(children, (child, index) => {
        if (typeof child === "string") {
            return child;
        }
        const prevSibling = prevChildTypes[prevChildTypes.length - 1];
        const mdxType = child.props.mdxType || "element";
        const isFirstOfType = prevChildTypes[prevChildTypes.length - 1] !== mdxType;
        prevChildTypes.push(mdxType);
        return (<exports.OrderContext.Provider value={{
                index,
                firstChild: index === 0,
                lastChild: index === childrenCount - 1,
                firstOfType: isFirstOfType,
                prevSibling,
            }}>
        {child}
      </exports.OrderContext.Provider>);
    });
}
exports.RootWrapper = RootWrapper;
function useOrder() {
    return react_1.default.useContext(exports.OrderContext);
}
exports.useOrder = useOrder;
function stripExtras(Element, displayName) {
    function E({ firstChild, lastChild, firstOfType, index, prevSibling, parentName, ...props }) {
        return <Element {...props}/>;
    }
    if (displayName != null) {
        E.displayName = displayName;
    }
    else if (typeof Element === "string") {
        E.displayName = Element;
    }
    else if ("displayName" in Element) {
        E.displayName = Element.displayName;
    }
    return E;
}
exports.stripExtras = stripExtras;
//# sourceMappingURL=getDOMComponents.jsx.map