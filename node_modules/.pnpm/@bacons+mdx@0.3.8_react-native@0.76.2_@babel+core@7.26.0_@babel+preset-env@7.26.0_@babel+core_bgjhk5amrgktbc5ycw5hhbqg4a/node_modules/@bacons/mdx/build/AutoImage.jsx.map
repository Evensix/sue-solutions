{"version":3,"file":"AutoImage.jsx","sourceRoot":"","sources":["../src/AutoImage.tsx"],"names":[],"mappings":";;;;;;AAAA,qDAAwD;AACxD,kDAA0B;AAC1B,+CAAsD;AAEtD,SAAgB,SAAS,CAAC,KAAiB;IACzC,MAAM,CAAC,OAAO,EAAE,YAAY,CAAC,GAAG,eAAK,CAAC,QAAQ,CAG3C,EAAE,CAAC,CAAC;IACP,MAAM,CAAC,WAAW,EAAE,cAAc,CAAC,GAAG,eAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;IAE1D,eAAK,CAAC,SAAS,CAAC,GAAG,EAAE;QACnB,mBAAmB;QACnB,oBAAa,CAAC,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE;YAC/C,YAAY,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC;QACxC,CAAC,CAAC,CAAC;IACL,CAAC,EAAE,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;IAEnB,MAAM,CAAC,WAAW,EAAE,cAAc,CAAC,GAAG,eAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;IAExD,eAAK,CAAC,SAAS,CAAC,GAAG,EAAE;QACnB,IAAI,WAAW,KAAK,CAAC,IAAI,OAAO,CAAC,KAAK,IAAI,IAAI,IAAI,OAAO,CAAC,MAAM,IAAI,IAAI;YACtE,OAAO;QAET,MAAM,KAAK,GAAG,OAAO,CAAC,KAAK,GAAG,OAAO,CAAC,MAAM,CAAC;QAC7C,MAAM,SAAS,GAAG,WAAW,GAAG,KAAK,CAAC;QACtC,IAAI,KAAK,CAAC,SAAS,CAAC;YAAE,OAAO;QAC7B,cAAc,CAAC,SAAS,CAAC,CAAC;IAC5B,CAAC,EAAE,CAAC,OAAO,EAAE,WAAW,CAAC,CAAC,CAAC;IAE3B,OAAO,CACL,CAAC,mBAAK,CACJ,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,EAAE,EAAE,MAAM,EAAE,WAAW,EAAE,CAAC,CAAC,CAC9C,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE;YACd,IAAI,WAAW,KAAK,CAAC,CAAC,WAAW,CAAC,MAAM,CAAC,KAAK;gBAAE,OAAO;YACvD,cAAc,CAAC,CAAC,CAAC,WAAW,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAC7C,CAAC,CAAC,CACF,MAAM,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,EACrB,CACH,CAAC;AACJ,CAAC;AApCD,8BAoCC","sourcesContent":["import { Image, ImageProps } from \"@bacons/react-views\";\nimport React from \"react\";\nimport { Image as UpstreamImage } from \"react-native\";\n\nexport function AutoImage(props: ImageProps) {\n  const [imgSize, setImageSize] = React.useState<{\n    width?: number;\n    height?: number;\n  }>({});\n  const [imageHeight, setImageHeight] = React.useState(100);\n\n  React.useEffect(() => {\n    // @ts-expect-error\n    UpstreamImage.getSize(props.source.uri, (w, h) => {\n      setImageSize({ width: w, height: h });\n    });\n  }, [props.source]);\n\n  const [layoutWidth, setLayoutWidth] = React.useState(0);\n\n  React.useEffect(() => {\n    if (layoutWidth === 0 || imgSize.width == null || imgSize.height == null)\n      return;\n\n    const ratio = imgSize.width / imgSize.height;\n    const newHeight = layoutWidth / ratio;\n    if (isNaN(newHeight)) return;\n    setImageHeight(newHeight);\n  }, [imgSize, layoutWidth]);\n\n  return (\n    <Image\n      style={[props.style, { height: imageHeight }]}\n      onLayout={(e) => {\n        if (layoutWidth === e.nativeEvent.layout.width) return;\n        setLayoutWidth(e.nativeEvent.layout.width);\n      }}\n      source={props.source}\n    />\n  );\n}\n"]}