{"version":3,"file":"MDXComponents.jsx","sourceRoot":"","sources":["../src/MDXComponents.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,6CAA+B;AAE/B,qEAAkE;AAQrD,QAAA,oBAAoB,GAAG,KAAK,CAAC,aAAa,CACrD,IAAA,+CAAsB,GAAE,CACzB,CAAC;AAEF,SAAgB,wBAAwB;IACtC,MAAM,OAAO,GAAG,KAAK,CAAC,UAAU,CAAC,4BAAoB,CAAC,CAAC;IACvD,IAAI,CAAC,OAAO,EAAE;QACZ,OAAO,IAAA,+CAAsB,GAAE,CAAC;KACjC;IACD,OAAO,OAAO,CAAC;AACjB,CAAC;AAND,4DAMC;AAED,SAAgB,aAAa,CAAC,EAC5B,QAAQ,EACR,UAAU,EACV,GAAG,KAAK,EAWW;IACnB,MAAM,QAAQ,GAAG,EAAE,GAAG,KAAK,EAAE,GAAG,UAAU,EAAE,CAAC;IAC7C,MAAM,MAAM,GAAG,wBAAwB,EAAE,CAAC;IAC1C,MAAM,KAAK,GAAG,KAAK,CAAC,OAAO,CACzB,GAAG,EAAE,CAAC,CAAC;QACL,GAAG,MAAM,CAAC,IAAI,CAAC,EAAE,GAAG,QAAQ,EAAE,GAAG,MAAM,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;;YAC7D,GAAG,CAAC,GAAG,CAAC,GAAG,MAAA,QAAQ,CAAC,GAAG,CAAC,mCAAI,MAAM,CAAC,GAAG,CAAC,CAAC;YACxC,OAAO,GAAG,CAAC;QACb,CAAC,EAAE,EAAc,CAAC;KACnB,CAAC,EACF,CAAC,MAAM,EAAE,QAAQ,CAAC,CACnB,CAAC;IACF,OAAO,CACL,CAAC,4BAAoB,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAC1C;MAAA,CAAC,QAAQ,CACX;IAAA,EAAE,4BAAoB,CAAC,QAAQ,CAAC,CACjC,CAAC;AACJ,CAAC;AA/BD,sCA+BC","sourcesContent":["import * as React from \"react\";\n\nimport { getUniversalComponents } from \"./getUniversalComponents\";\nimport { ComponentKeys } from \"./getDOMComponents\";\n\ntype Elements = Record<\n  keyof ReturnType<typeof getUniversalComponents>,\n  React.ComponentType<any>\n>;\n\nexport const MDXComponentsContext = React.createContext<Elements>(\n  getUniversalComponents()\n);\n\nexport function useInternalMDXComponents() {\n  const context = React.useContext(MDXComponentsContext);\n  if (!context) {\n    return getUniversalComponents();\n  }\n  return context;\n}\n\nexport function MDXComponents({\n  children,\n  components,\n  ...props\n}: {\n  children?: any;\n  components?: Partial<\n    Record<\n      | ComponentKeys\n      // Allow any arbitrary component to be passed in for use in MDX but don't allow it to show in the autocorrect.\n      | (string & {}),\n      React.ComponentType<any>\n    >\n  >;\n} & Partial<Elements>) {\n  const allProps = { ...props, ...components };\n  const parent = useInternalMDXComponents();\n  const value = React.useMemo(\n    () => ({\n      ...Object.keys({ ...allProps, ...parent }).reduce((acc, key) => {\n        acc[key] = allProps[key] ?? parent[key];\n        return acc;\n      }, {} as Elements),\n    }),\n    [parent, allProps]\n  );\n  return (\n    <MDXComponentsContext.Provider value={value}>\n      {children}\n    </MDXComponentsContext.Provider>\n  );\n}\n"]}