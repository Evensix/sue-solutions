"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useMDXComponents = void 0;
const react_1 = __importDefault(require("react"));
const MDXComponents_1 = require("./MDXComponents");
const MDXStyles_1 = require("./MDXStyles");
/** Get the composed MDX elements. */
function useMDXComponents() {
    const styles = (0, MDXStyles_1.useMDXStyles)();
    const components = (0, MDXComponents_1.useInternalMDXComponents)();
    // Mix the context styles into the components
    const obj = Object.keys(components).reduce((acc, key) => {
        acc[key] = (props) => {
            if (typeof components[key] === "function") {
                return components[key]({ ...props, style: styles[key] });
            }
            return react_1.default.createElement(components[key], {
                ...props,
                style: styles[key],
            });
        };
        return acc;
    }, {});
    // Wrap with a proxy to add better error messages when a component is missing.
    return withProxyErrors(obj);
}
exports.useMDXComponents = useMDXComponents;
function withProxyErrors(components) {
    return new Proxy(components, {
        get(target, prop) {
            if (typeof prop !== "string") {
                return;
            }
            if (prop in target && target[prop]) {
                return target[prop];
            }
            // If the prop starts with a lowercase letter, it's not a missing built-in component (internal bug).
            if (prop[0].match(/[a-z]/)) {
                throw new Error(`No MDX component found for key: "${prop}". Define it using the React provider: <MDXComponents components={{ "${prop}": () => <Text ... /> }}>`);
            }
            // For components, depend on the transform to add the error message.
        },
    });
}
//# sourceMappingURL=useMDXComponents.jsx.map