{"version":3,"file":"MDXStyles.jsx","sourceRoot":"","sources":["../src/MDXStyles.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,6CAA+B;AAUlB,QAAA,gBAAgB,GAAG,KAAK,CAAC,aAAa,CAAS,EAAE,CAAC,CAAC;AAEhE,SAAgB,YAAY;IAC1B,OAAO,KAAK,CAAC,UAAU,CAAC,wBAAgB,CAAC,CAAC;AAC5C,CAAC;AAFD,oCAEC;AAED,SAAgB,SAAS,CAAC,EAAE,QAAQ,EAAE,GAAG,KAAK,EAA+B;IAC3E,MAAM,MAAM,GAAG,YAAY,EAAE,CAAC;IAC9B,MAAM,KAAK,GAAG,KAAK,CAAC,OAAO,CACzB,GAAG,EAAE,CAAC,CAAC;QACL,GAAG,MAAM,CAAC,IAAI,CAAC,EAAE,GAAG,KAAK,EAAE,GAAG,MAAM,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;YAC1D,MAAM,WAAW,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC;YAChC,MAAM,UAAU,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC;YAC9B,IAAI,OAAO,WAAW,KAAK,QAAQ,IAAI,OAAO,UAAU,KAAK,QAAQ,EAAE;gBACrE,GAAG,CAAC,GAAG,CAAC,GAAG;oBACT,GAAG,WAAW;oBACd,GAAG,UAAU;iBACd,CAAC;aACH;iBAAM;gBACL,IAAI,GAAG,IAAI,KAAK,EAAE;oBAChB,GAAG,CAAC,GAAG,CAAC,GAAG,UAAU,CAAC;iBACvB;qBAAM,IAAI,GAAG,IAAI,MAAM,EAAE;oBACxB,GAAG,CAAC,GAAG,CAAC,GAAG,WAAW,CAAC;iBACxB;aACF;YACD,OAAO,GAAG,CAAC;QACb,CAAC,EAAE,EAAY,CAAC;KACjB,CAAC,EACF,CAAC,MAAM,EAAE,KAAK,CAAC,CAChB,CAAC;IACF,OAAO,CACL,CAAC,wBAAgB,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CACtC;MAAA,CAAC,QAAQ,CACX;IAAA,EAAE,wBAAgB,CAAC,QAAQ,CAAC,CAC7B,CAAC;AACJ,CAAC;AA7BD,8BA6BC","sourcesContent":["import { TextStyle } from \"@expo/html-elements/build/primitives/Text\";\nimport { ViewStyle } from \"@expo/html-elements/build/primitives/View\";\nimport * as React from \"react\";\n\nimport { getUniversalComponents } from \"./getUniversalComponents\";\n\n// React.ComponentProps<RenderMdx>\n\ntype Styles = Partial<\n  Record<keyof ReturnType<typeof getUniversalComponents>, TextStyle | ViewStyle>\n>;\n\nexport const MDXStylesContext = React.createContext<Styles>({});\n\nexport function useMDXStyles() {\n  return React.useContext(MDXStylesContext);\n}\n\nexport function MDXStyles({ children, ...props }: { children?: any } & Styles) {\n  const parent = useMDXStyles();\n  const value = React.useMemo(\n    () => ({\n      ...Object.keys({ ...props, ...parent }).reduce((acc, key) => {\n        const parentValue = parent[key];\n        const childValue = props[key];\n        if (typeof parentValue === \"object\" && typeof childValue === \"object\") {\n          acc[key] = {\n            ...parentValue,\n            ...childValue,\n          };\n        } else {\n          if (key in props) {\n            acc[key] = childValue;\n          } else if (key in parent) {\n            acc[key] = parentValue;\n          }\n        }\n        return acc;\n      }, {} as Styles),\n    }),\n    [parent, props]\n  );\n  return (\n    <MDXStylesContext.Provider value={value}>\n      {children}\n    </MDXStylesContext.Provider>\n  );\n}\n"]}