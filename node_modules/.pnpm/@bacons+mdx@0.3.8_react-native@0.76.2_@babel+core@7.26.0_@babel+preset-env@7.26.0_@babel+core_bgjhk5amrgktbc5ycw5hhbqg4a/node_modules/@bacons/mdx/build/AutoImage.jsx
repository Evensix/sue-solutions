"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AutoImage = void 0;
const react_views_1 = require("@bacons/react-views");
const react_1 = __importDefault(require("react"));
const react_native_1 = require("react-native");
function AutoImage(props) {
    const [imgSize, setImageSize] = react_1.default.useState({});
    const [imageHeight, setImageHeight] = react_1.default.useState(100);
    react_1.default.useEffect(() => {
        // @ts-expect-error
        react_native_1.Image.getSize(props.source.uri, (w, h) => {
            setImageSize({ width: w, height: h });
        });
    }, [props.source]);
    const [layoutWidth, setLayoutWidth] = react_1.default.useState(0);
    react_1.default.useEffect(() => {
        if (layoutWidth === 0 || imgSize.width == null || imgSize.height == null)
            return;
        const ratio = imgSize.width / imgSize.height;
        const newHeight = layoutWidth / ratio;
        if (isNaN(newHeight))
            return;
        setImageHeight(newHeight);
    }, [imgSize, layoutWidth]);
    return (<react_views_1.Image style={[props.style, { height: imageHeight }]} onLayout={(e) => {
            if (layoutWidth === e.nativeEvent.layout.width)
                return;
            setLayoutWidth(e.nativeEvent.layout.width);
        }} source={props.source}/>);
}
exports.AutoImage = AutoImage;
//# sourceMappingURL=AutoImage.jsx.map