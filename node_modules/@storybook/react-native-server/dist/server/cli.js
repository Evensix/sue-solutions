"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseList = void 0;
var path_1 = __importDefault(require("path"));
var commander_1 = require("commander");
function parseList(str) {
    return str.split(',');
}
exports.parseList = parseList;
function getCli() {
    commander_1.program
        .option('-h, --host <host>', 'host to listen on', 'localhost')
        .option('-p, --port <port>', 'port to listen on', function (str) { return parseInt(str, 10); }, 7007)
        .option('-e, --environment [environment]', 'DEVELOPMENT/PRODUCTION environment for webpack')
        .option('-i, --manual-id', 'allow multiple users to work with same storybook')
        .option('-c, --config-dir [dir-name]', 'Directory where to load Storybook configurations from')
        .option('--https', 'Serve Storybook over HTTPS. Note: You must provide your own certificate information.')
        .option('--ssl-ca <ca>', 'Provide an SSL certificate authority. (Optional with --https, required if using a self-signed certificate)', parseList)
        .option('--ssl-cert <cert>', 'Provide an SSL certificate. (Required with --https)')
        .option('--ssl-key <key>', 'Provide an SSL key. (Required with --https)')
        .option('--smoke-test', 'Exit after successful start')
        .option('--ci', "CI mode (skip interactive prompts, don't open browser)")
        .option('--open', "Whether to open Storybook automatically in the browser")
        .option('--quiet', 'Suppress verbose build output');
    commander_1.program.parse();
    var options = commander_1.program.opts();
    var configDir = path_1.default.resolve(options.configDir || './.storybook_server');
    return __assign(__assign({}, options), { configDir: configDir });
}
exports.default = getCli;
